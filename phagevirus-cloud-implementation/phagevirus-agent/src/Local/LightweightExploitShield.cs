using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using PhageVirus.Agent.Shared;

namespace PhageVirus.Agent.Local
{
    public class LightweightExploitShield : ILocalSecurityModule
    {
        private readonly ILogger<LightweightExploitShield> _logger;
        private readonly IConfiguration _configuration;
        private readonly CancellationTokenSource _cancellationTokenSource;
        
        private bool _isRunning = false;

        public LightweightExploitShield(IConfiguration configuration, ILogger<LightweightExploitShield> logger)
        {
            _configuration = configuration;
            _logger = logger;
            _cancellationTokenSource = new CancellationTokenSource();
        }

        public async Task StartAsync()
        {
            if (_isRunning)
            {
                _logger.LogWarning("Lightweight exploit shield is already running");
                return;
            }

            _logger.LogInformation("Starting lightweight exploit shield");
            _isRunning = true;

            try
            {
                // Start monitoring loop
                _ = Task.Run(MonitoringLoopAsync, _cancellationTokenSource.Token);

                _logger.LogInformation("Lightweight exploit shield started successfully");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to start lightweight exploit shield");
                throw;
            }
        }

        public async Task StopAsync()
        {
            if (!_isRunning)
            {
                return;
            }

            _logger.LogInformation("Stopping lightweight exploit shield");
            _isRunning = false;

            try
            {
                _cancellationTokenSource.Cancel();
                _logger.LogInformation("Lightweight exploit shield stopped successfully");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error stopping lightweight exploit shield");
            }
        }

        private async Task MonitoringLoopAsync()
        {
            var scanInterval = _configuration.GetValue<int>("local:scan_interval", 60);

            while (!_cancellationTokenSource.Token.IsCancellationRequested)
            {
                try
                {
                    await ScanForExploitsAsync();
                    await Task.Delay(TimeSpan.FromSeconds(scanInterval), _cancellationTokenSource.Token);
                }
                catch (OperationCanceledException)
                {
                    break;
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error in exploit monitoring loop");
                    await Task.Delay(TimeSpan.FromSeconds(30), _cancellationTokenSource.Token);
                }
            }
        }

        private async Task ScanForExploitsAsync()
        {
            try
            {
                var processes = Process.GetProcesses().Take(30); // Limit to first 30 processes

                foreach (var process in processes)
                {
                    try
                    {
                        // Check for exploit-related processes
                        if (IsExploitProcess(process))
                        {
                            _logger.LogWarning($"Exploit-related process detected: {process.ProcessName} (PID: {process.Id})");
                        }

                        // Check for processes with unusual characteristics
                        if (HasUnusualCharacteristics(process))
                        {
                            _logger.LogWarning($"Process with unusual characteristics: {process.ProcessName} (PID: {process.Id})");
                        }
                    }
                    catch
                    {
                        // Skip processes we can't access
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error scanning for exploits");
            }
        }

        private bool IsExploitProcess(Process process)
        {
            try
            {
                var processName = process.ProcessName.ToLower();
                
                // Check for exploit-related keywords
                var exploitKeywords = new[] { "exploit", "shell", "payload", "inject", "hook", "patch" };
                
                return exploitKeywords.Any(keyword => processName.Contains(keyword));
            }
            catch
            {
                return false;
            }
        }

        private bool HasUnusualCharacteristics(Process process)
        {
            try
            {
                // Check for processes with no window but high CPU usage
                if (process.MainWindowHandle == IntPtr.Zero && process.TotalProcessorTime.TotalSeconds > 5)
                {
                    return true;
                }

                // Check for processes with unusual memory patterns
                if (process.WorkingSet64 > 300 * 1024 * 1024 && process.ProcessName.Length < 6)
                {
                    return true;
                }

                // Check for processes with high thread count but low memory usage
                if (process.Threads.Count > 50 && process.WorkingSet64 < 10 * 1024 * 1024)
                {
                    return true;
                }

                return false;
            }
            catch
            {
                return false;
            }
        }
    }
} 